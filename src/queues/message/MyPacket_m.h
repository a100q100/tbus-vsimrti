//
// Generated file, do not edit! Created by opp_msgc 4.4 from queues/message/MyPacket.msg.
//

#ifndef _MYPACKET_M_H_
#define _MYPACKET_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0404
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
	#include "Bbdelay.h"
    #include "Datarate.h"
// }}



/**
 * Class generated from <tt>queues/message/MyPacket.msg</tt> by opp_msgc.
 * <pre>
 * packet MyPacket{
 * 	bool droppedSimulated;                 
 * 	int payloadSize;                       
 * 	int sequenceNumber;                    
 * 	int packetNumber;                      
 * 	int numberOfProbePackets;              
 * 	string destinationIP;                  
 * 	string sourceIP;                       
 * 	string sourcePort;                     
 * 	string destinationPort;                
 * 	simtime_t startTimeForLogging;         
 * 	simtime_t sendingTimeForLogging;       
 * 	simtime_t arrivalTimeForLogging;       
 * 	simtime_t earliestTimeForDelivery;     
 * 	string timestamps[];                   
 * 	
 *     bool droppedMeasured;                  
 * 	simtime_t recTstampMeasured;           
 * 	simtime_t delayMeasured;               
 * 	simtime_t dCRSQ;                       
 * 	simtime_t dCDSQ;                       
 * 	simtime_t dCDRQ;                       
 * 	simtime_t dCRRQ;                       
 * 	simtime_t sCRSQ;                       
 * 	simtime_t sCDSQ;                       
 * 	simtime_t sCDRQ;                       
 * 	simtime_t sCRRQ;                       
 * 	double droprateQueue;                  
 * 	
 *     Bbdelay bbdelay;                       
 *     Datarate datarate;                     
 *    
 * }
 * </pre>
 */
class MyPacket : public ::cPacket
{
  protected:
    bool droppedSimulated_var;
    int payloadSize_var;
    int sequenceNumber_var;
    int packetNumber_var;
    int numberOfProbePackets_var;
    opp_string destinationIP_var;
    opp_string sourceIP_var;
    opp_string sourcePort_var;
    opp_string destinationPort_var;
    simtime_t startTimeForLogging_var;
    simtime_t sendingTimeForLogging_var;
    simtime_t arrivalTimeForLogging_var;
    simtime_t earliestTimeForDelivery_var;
    opp_string *timestamps_var; // array ptr
    unsigned int timestamps_arraysize;
    bool droppedMeasured_var;
    simtime_t recTstampMeasured_var;
    simtime_t delayMeasured_var;
    simtime_t dCRSQ_var;
    simtime_t dCDSQ_var;
    simtime_t dCDRQ_var;
    simtime_t dCRRQ_var;
    simtime_t sCRSQ_var;
    simtime_t sCDSQ_var;
    simtime_t sCDRQ_var;
    simtime_t sCRRQ_var;
    double droprateQueue_var;
    projekt::Bbdelay bbdelay_var;
    projekt::Datarate datarate_var;

  private:
    void copy(const MyPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MyPacket&);

  public:
    MyPacket(const char *name=NULL, int kind=0);
    MyPacket(const MyPacket& other);
    virtual ~MyPacket();
    MyPacket& operator=(const MyPacket& other);
    virtual MyPacket *dup() const {return new MyPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool getDroppedSimulated() const;
    virtual void setDroppedSimulated(bool droppedSimulated);
    virtual int getPayloadSize() const;
    virtual void setPayloadSize(int payloadSize);
    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);
    virtual int getPacketNumber() const;
    virtual void setPacketNumber(int packetNumber);
    virtual int getNumberOfProbePackets() const;
    virtual void setNumberOfProbePackets(int numberOfProbePackets);
    virtual const char * getDestinationIP() const;
    virtual void setDestinationIP(const char * destinationIP);
    virtual const char * getSourceIP() const;
    virtual void setSourceIP(const char * sourceIP);
    virtual const char * getSourcePort() const;
    virtual void setSourcePort(const char * sourcePort);
    virtual const char * getDestinationPort() const;
    virtual void setDestinationPort(const char * destinationPort);
    virtual simtime_t getStartTimeForLogging() const;
    virtual void setStartTimeForLogging(simtime_t startTimeForLogging);
    virtual simtime_t getSendingTimeForLogging() const;
    virtual void setSendingTimeForLogging(simtime_t sendingTimeForLogging);
    virtual simtime_t getArrivalTimeForLogging() const;
    virtual void setArrivalTimeForLogging(simtime_t arrivalTimeForLogging);
    virtual simtime_t getEarliestTimeForDelivery() const;
    virtual void setEarliestTimeForDelivery(simtime_t earliestTimeForDelivery);
    virtual void setTimestampsArraySize(unsigned int size);
    virtual unsigned int getTimestampsArraySize() const;
    virtual const char * getTimestamps(unsigned int k) const;
    virtual void setTimestamps(unsigned int k, const char * timestamps);
    virtual bool getDroppedMeasured() const;
    virtual void setDroppedMeasured(bool droppedMeasured);
    virtual simtime_t getRecTstampMeasured() const;
    virtual void setRecTstampMeasured(simtime_t recTstampMeasured);
    virtual simtime_t getDelayMeasured() const;
    virtual void setDelayMeasured(simtime_t delayMeasured);
    virtual simtime_t getDCRSQ() const;
    virtual void setDCRSQ(simtime_t dCRSQ);
    virtual simtime_t getDCDSQ() const;
    virtual void setDCDSQ(simtime_t dCDSQ);
    virtual simtime_t getDCDRQ() const;
    virtual void setDCDRQ(simtime_t dCDRQ);
    virtual simtime_t getDCRRQ() const;
    virtual void setDCRRQ(simtime_t dCRRQ);
    virtual simtime_t getSCRSQ() const;
    virtual void setSCRSQ(simtime_t sCRSQ);
    virtual simtime_t getSCDSQ() const;
    virtual void setSCDSQ(simtime_t sCDSQ);
    virtual simtime_t getSCDRQ() const;
    virtual void setSCDRQ(simtime_t sCDRQ);
    virtual simtime_t getSCRRQ() const;
    virtual void setSCRRQ(simtime_t sCRRQ);
    virtual double getDroprateQueue() const;
    virtual void setDroprateQueue(double droprateQueue);
    virtual projekt::Bbdelay& getBbdelay();
    virtual const projekt::Bbdelay& getBbdelay() const {return const_cast<MyPacket*>(this)->getBbdelay();}
    virtual void setBbdelay(const projekt::Bbdelay& bbdelay);
    virtual projekt::Datarate& getDatarate();
    virtual const projekt::Datarate& getDatarate() const {return const_cast<MyPacket*>(this)->getDatarate();}
    virtual void setDatarate(const projekt::Datarate& datarate);
};

inline void doPacking(cCommBuffer *b, MyPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MyPacket& obj) {obj.parsimUnpack(b);}


#endif // _MYPACKET_M_H_
